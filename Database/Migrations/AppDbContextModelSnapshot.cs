// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Core.ChatEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("event_type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("CreatedAt");

                    b.ToTable("ChatEvents");

                    b.HasDiscriminator<string>("event_type").HasValue("ChatEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthorizationVersion")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Avatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.UserId", b =>
                {
                    b.Property<Guid>("Value")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("Database.Models.GroupChatUser", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupChatUsers");
                });

            modelBuilder.Entity("Database.VerificationResult", b =>
                {
                    b.Property<bool>("ChatExists")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMemberOfChat")
                        .HasColumnType("bit");

                    b.Property<bool>("UserExists")
                        .HasColumnType("bit");

                    b.ToTable("CheckUserAndChatExistenceResults");
                });

            modelBuilder.Entity("Core.GroupChat", b =>
                {
                    b.HasBaseType("Core.Chat");

                    b.Property<string>("ChatDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ChatImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("JoinMode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("Core.PrivateChat", b =>
                {
                    b.HasBaseType("Core.Chat");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("PrivateChats");
                });

            modelBuilder.Entity("Core.GroupChatDescriptionUpdatedEvent", b =>
                {
                    b.HasBaseType("Core.ChatEvent");

                    b.Property<string>("ChatDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasDiscriminator().HasValue("group_chat_description_updated");
                });

            modelBuilder.Entity("Core.GroupChatImageUpdatedEvent", b =>
                {
                    b.HasBaseType("Core.ChatEvent");

                    b.Property<string>("ChatImage")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasDiscriminator().HasValue("group_chat_image_updated");
                });

            modelBuilder.Entity("Core.GroupChatNameUpdatedEvent", b =>
                {
                    b.HasBaseType("Core.ChatEvent");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("group_chat_name_updated");
                });

            modelBuilder.Entity("Core.UserJoinedGroupChatEvent", b =>
                {
                    b.HasBaseType("Core.ChatEvent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("joined_user_id");

                    b.HasDiscriminator().HasValue("user_joined_group_chat");
                });

            modelBuilder.Entity("Core.UserLeftGroupChatEvent", b =>
                {
                    b.HasBaseType("Core.ChatEvent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("left_user_id");

                    b.HasDiscriminator().HasValue("user_left_group_chat");
                });

            modelBuilder.Entity("Core.ChatEvent", b =>
                {
                    b.HasOne("Core.Chat", null)
                        .WithMany("Events")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Database.Models.GroupChatUser", b =>
                {
                    b.HasOne("Core.GroupChat", null)
                        .WithMany()
                        .HasForeignKey("GroupChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.PrivateChat", b =>
                {
                    b.HasOne("Core.User", null)
                        .WithMany("PrivateChats")
                        .HasForeignKey("UserId");

                    b.HasOne("Core.User", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.User", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Core.Chat", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Navigation("PrivateChats");
                });
#pragma warning restore 612, 618
        }
    }
}
